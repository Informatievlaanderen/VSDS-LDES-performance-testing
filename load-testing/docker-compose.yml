networks:
  performance_testing:
    name: performance_testing_network

services:

  prometheus:
    image: prom/prometheus:latest
    container_name: performance_testing_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - performance_testing


  # pyroscope:
  #   container_name: performance_testing_pyroscope
  #   image: grafana/pyroscope:${PYROSCOPE_TAG:-latest}
  #   ports:
  #     - ${PYROSCOPE_PORT:-4040}:4040
  #   networks:
  #     - performance_testing
  #   healthcheck:
  #     test: ["CMD", "wget", "-qO-", "http://pyroscope:4040/ready"]
  #     interval: 12s
  #     timeout: 3s
  #     retries: 20


  grafana:
    container_name: performance_testing_grafana
    image: grafana/grafana:${GRAFANA_TAG:-main}
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    networks:
      - performance_testing
    # depends_on:
    #   - pyroscope
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://grafana:3000/api/health"]
      interval: 12s
      timeout: 3s
      retries: 20


  jmeter-runner:
    container_name: performance_testing_jmeter-runner
    image: ghcr.io/informatievlaanderen/jmeter-runner:20240424t1412
    networks:
      - performance_testing 
    ports:
      - 9000:80
    volumes:
      - ${TEST_FOLDER:-./tests}:/home/node/jmeter-runner/tests:rw
      - ${TEMP_FOLDER:-./temp}:/home/node/jmeter-runner/temp:rw
    depends_on:
      ldes-server:
        condition: service_healthy
      ldio-workbench:
        condition: service_healthy
    environment:
      - TEST_FOLDER_BASE=/home/node/jmeter-runner/tests
      - TEMP_FOLDER_BASE=/home/node/jmeter-runner/temp
      - BASE_URL=${BASE_URL:-http://localhost:9000}
      - SILENT=${SILENT:-true}
      - MAX_RUNNING=${MAX_RUNNING:-1}
      - REFRESH_TIME=${REFRESH_TIME:-30}
      - RUN_TEST_API_KEY=${RUN_TEST_API_KEY:-}
      - CHECK_TEST_API_KEY=${CHECK_TEST_API_KEY:-}
      - DELETE_TEST_API_KEY=${DELETE_TEST_API_KEY:-}
      - CUSTOM_LABELS=${CUSTOM_LABELS:-threads size type component members_per_page}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '1.5GB'
        reservations:
          cpus: '0.1'
          memory: '0.25GB'

  ldio-workbench:
    container_name: performance_testing_ldio-workbench
    image: ghcr.io/informatievlaanderen/ldi-orchestrator:20240814211044
    # image: ldes/ldi-orchestrator:${LDI_ORCHESTRATOR_TAG:-2.5.1-SNAPSHOT}
    networks:
      - performance_testing
    ports:
      - ${LDIO_WORKBENCH_PORT:-8081}:8080
    volumes:
      - ./workbench/tmp/epsg:/tmp/Databases:rw
      - ./workbench/config.yml:/ldio/application.yml:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://ldio-workbench:8080/actuator/health"]
    environment:
      - SIS_DATA=/tmp
      - JAVA_TOOL_OPTIONS=-XX:MaxRAMPercentage=90 -XX:MinRAMPercentage=50
      - SERVER_PORT=8080
      - ORCHESTRATOR_DIRECTORY=/ldio/pipelines
    deploy:
      resources:
        limits:
          cpus: '3.5'
          memory: '15.0GB'
        reservations:
          cpus: '0.10'
          memory: '0.25GB'

  ldes-postgres:
    container_name: ldes-postgres
    image: postgres:14-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=admin
      - POSTGRES_USER=admin
      - POSTGRES_DB=test
    networks:
      - performance_testing
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '3.0GB'
        reservations:
          cpus: '0.50'
          memory: '0.5GB'

  ldes-server:
    container_name: performance_testing_ldes-server
    # image: ghcr.io/informatievlaanderen/ldes-server:latest
    # image: ldes/ldes-server:${LDES_SERVER_TAG:-2.3.0-SNAPSHOT} # CrowdScan
    # image: ldes/ldes-server:${LDES_SERVER_TAG:-2.4.1-SNAPSHOT} # Geomobility
    # image: ldes/ldes-server:${LDES_SERVER_TAG:-2.10.0-SNAPSHOT} # Telraam
    # image: ghcr.io/informatievlaanderen/ldes-server:20240405144556
    image: ghcr.io/informatievlaanderen/ldes-server:20240902140211
    networks:
      - performance_testing
    ports:
      - ${LDES_SERVER_PORT:-8080}:8080
    volumes:
      - ./server/tmp/epsg:/tmp/Databases:rw
      - ./server/config.yml:/application.yml:ro
    depends_on:
      - ldes-postgres
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://ldes-server:8080/actuator/health"]
    environment:
      - SPRING_TASK_SCHEDULING_POOL_SIZE=5
      - LDESSERVER_FRAGMENTATIONCRON=${LDES_SERVER_FRAGMENTATION_CRON:-*/15 * * * * *}
      - SIS_DATA=/tmp
      - JAVA_TOOL_OPTIONS=-XX:MaxRAMPercentage=90 -XX:MinRAMPercentage=50
      - spring_Datasource_URL=jdbc:postgresql://ldes-postgres:5432/test
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - LDESSERVER_HOSTNAME=http://ldes-server:${LDES_SERVER_PORT:-8080}
      - SERVER_PORT=8080
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: '2.0GB'
        reservations:
          cpus: '0.50'
          memory: '0.5GB'

  adminer:
    image: adminer:${ADMINER_TAG:-latest}
    container_name: performance_testing_adminer
    depends_on:
      - ldes-postgres
    ports:
      - 8085:8080
    networks:
      - performance_testing
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.25GB'
        reservations:
          cpus: '0.125'
          memory: '0.125GB'
          